#!/bin/sh
# Runs the entire workflow.
# Give it a prompt as $1
# Files to edit in $2

WEAK_MODEL="qwen_anne"
STRONG_MODEL="qwq_anne"
CLASSIFIER_MODEL="qwen_anne"
REQUEST="$1"
FILES="$2"

. /home/anne/.config/aider/env.sh
rustup default stable

# this will avoid
run_weak=1

# TODO add checks to ensure params are given

code() {
    # $1 prompt

    # TODO fix issue where it might revert files during review fixup phase
    # if weak model succeeded at implementing the task but fails at following the review.
    
    [ $run_weak -eq 1 ] && /home/anne/share/prog/tools/autocode2/coding.sh "ollama_chat/$WEAK_MODEL" "$1" "$FILES" || { [ $run_weak -eq 1 ] && run_weak=0 && git reset --hard;  /home/anne/share/prog/tools/autocode2/coding.sh "ollama_chat/$STRONG_MODEL" "$REQUEST" "$FILES" ; } || { echo "Failed to implement request. Quitting." && git reset --hard && exit 1; } && cargo fmt
    #/home/anne/share/prog/tools/autocode2/coding.sh "ollama_chat/$STRONG_MODEL" "$REQUEST" "$FILES" || { echo "Failed to implement request. Quitting." && git reset --hard && exit 1; }
}

# Review

review() {
    # $1 model
    echo "Running code review. Using: $1"
    REVIEW_BEGIN="You are an expert rust programmer. A different AI was tasked with implementing the following request: \`\`\`$REQUEST\`\`\`. Your job is to analyze the following code and create a comprehensive text review of any issues you can find with it, as well as any area of improvement. Make sure to take the request into consideration. If you cannot find any, reply with \"The code looks good to me\". Here is the code you need to review:"
    timeout 300s ollama run "$1" "$REVIEW_BEGIN $(git diff -U30)" > /tmp/review_output || return 0

    # classify is a code change is required from the review.
    echo "Checking if we need to make code changes. Using: $WEAK_MODEL"
    ollama run "$CLASSIFIER_MODEL" "Given the following review generated by a different AI, your job is to reply with a simple \"yes\" or \"no\" as if the review is asking for code changes. If the review requires code changes, reply with only \"yes\" and nothing else. If the review does not require code changes, reply with only \"no\" and nothing else. Here is the review you need to look at: $(cat /tmp/review_output)" > /tmp/yesno

    # todo switch case
    YESNO="$(cat /tmp/yesno)"
    case "$YESNO" in
        "yes"|"Yes")
            echo "Code change requested by review."
            return 1
            ;;
        "no"|"No")
            echo "Code change not needed following review."
            return 0
            ;;
        *)
            echo "Wrong output from yes/no classifier. Received: $YESNO"
            exit 1
            ;;
    esac
}

# Code original ask
code "$REQUEST"

# TODO loop those until review clean.
review "$WEAK_MODEL" || code "You are an expert programmer. Apply the following review: $(cat /tmp/review_output)"
review "$STRONG_MODEL" || code "You are an expert programmer. Apply the following review: $(cat /tmp/review_output)"

echo "Finished requested task. Exiting cleanly."
exit 0
